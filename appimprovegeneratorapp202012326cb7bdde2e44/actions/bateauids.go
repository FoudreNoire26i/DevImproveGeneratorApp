package actions

import (

  "fmt"
  "github.com/gobuffalo/buffalo"
  "github.com/gobuffalo/pop"
  "generatedApps/appimprovegeneratorapp202012326cb7bdde2e44/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Bateauid)
// DB Table: Plural (bateauids)
// Resource: Plural (Bateauids)
// Path: Plural (/bateauids)
// View Template Folder: Plural (/templates/bateauids/)

// BateauidsResource is the resource for the Bateauid model
type BateauidsResource struct{
  buffalo.Resource
}

// List gets all Bateauids. This function is mapped to the path
// GET /bateauids
func (v BateauidsResource) List(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  bateauids := &models.Bateauids{}

  // Paginate results. Params "page" and "per_page" control pagination.
  // Default values are "page=1" and "per_page=20".
  q := tx.PaginateFromParams(c.Params())

  // Retrieve all Bateauids from the DB
  if err := q.All(bateauids); err != nil {
    return err
  }

  // Add the paginator to the context so it can be used in the template.
  c.Set("pagination", q.Paginator)

  return c.Render(200, r.Auto(c, bateauids))
}

// Show gets the data for one Bateauid. This function is mapped to
// the path GET /bateauids/{bateauid_id}
func (v BateauidsResource) Show(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty Bateauid
  bateauid := &models.Bateauid{}

  // To find the Bateauid the parameter bateauid_id is used.
  if err := tx.Find(bateauid, c.Param("bateauid_id")); err != nil {
    return c.Error(404, err)
  }

  return c.Render(200, r.Auto(c, bateauid))
}

// Create adds a Bateauid to the DB. This function is mapped to the
// path POST /bateauids
func (v BateauidsResource) Create(c buffalo.Context) error {
  // Allocate an empty Bateauid
  bateauid := &models.Bateauid{}

  // Bind bateauid to the html form elements
  if err := c.Bind(bateauid); err != nil {
    return err
  }

  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Validate the data from the html form
  verrs, err := tx.ValidateAndCreate(bateauid)
  if err != nil {
    return err
  }

  if verrs.HasAny() {
    // Make the errors available inside the html template
    c.Set("errors", verrs)

    // Render again the new.html template that the user can
    // correct the input.
    return c.Render(422, r.Auto(c, bateauid))
  }

  // and redirect to the bateauids index page
  return c.Render(201, r.Auto(c, bateauid))
}

// Update changes a Bateauid in the DB. This function is mapped to
// the path PUT /bateauids/{bateauid_id}
func (v BateauidsResource) Update(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty Bateauid
  bateauid := &models.Bateauid{}

  if err := tx.Find(bateauid, c.Param("bateauid_id")); err != nil {
    return c.Error(404, err)
  }

  // Bind Bateauid to the html form elements
  if err := c.Bind(bateauid); err != nil {
    return err
  }

  verrs, err := tx.ValidateAndUpdate(bateauid)
  if err != nil {
    return err
  }

  if verrs.HasAny() {
    // Make the errors available inside the html template
    c.Set("errors", verrs)

    // Render again the edit.html template that the user can
    // correct the input.
    return c.Render(422, r.Auto(c, bateauid))
  }

  // and redirect to the bateauids index page
  return c.Render(200, r.Auto(c, bateauid))
}

// Destroy deletes a Bateauid from the DB. This function is mapped
// to the path DELETE /bateauids/{bateauid_id}
func (v BateauidsResource) Destroy(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty Bateauid
  bateauid := &models.Bateauid{}

  // To find the Bateauid the parameter bateauid_id is used.
  if err := tx.Find(bateauid, c.Param("bateauid_id")); err != nil {
    return c.Error(404, err)
  }

  if err := tx.Destroy(bateauid); err != nil {
    return err
  }

  // Redirect to the bateauids index page
  return c.Render(200, r.Auto(c, bateauid))
}
